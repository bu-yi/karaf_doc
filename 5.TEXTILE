h1. 5. Developer Guide

h2. 5.1. Developer commands

사용자 가이드에서 볼 수 있듯이 Apache Karaf는 엔터프라이즈 용 OSGi 컨테이너입니다.
또한 개발자와 관리자가 실행중인 컨테이너에 대한 세부 정보를 쉽게 얻을 수 있도록 설계된 컨테이너이기도합니다.

h3. 5.1.1. Dump

성능 저하, 이상한 동작과 같은 문제가 발생하면 컨테이너의 현재 활동에 대한 일종의 스냅 샷을 만드는 것이 도움이 될 수 있습니다.

@dev:dump-create@ 명령은 다음을 포함하는 덤프 파일을 만듭니다. 
* bundles.txt
* features.txt
* environment.txt
* memory.txt
* heapdump.txt
* threads.txt
* log

@dev:dump-create@ 명령은 KARAF_BASE 폴더에 타임스탬프와 함께 zip 파일을 생성 

<pre>
karaf@root()> dev:dump-create
Created dump zip: 2015-07-01_171434.zip
</pre>

KARAF_BASE 폴더에 파일이 생성된 것을 볼 수 있음

<pre>
$ cd /opt/apache-karaf-4.0.0
$ ls -lh *.zip
-rw-rw-r-- 1 user group 17M Jul  1 17:14 2015-07-01_171434.zip
</pre>

파일이름을 특정할 수 있음
<pre>
karaf@root()> dev:dump-create mydump.zip
Diagnostic dump created.
</pre>

@-d (--directory)@ 옵션을 이용해 파일 위치도 변경 가능

<pre>
karaf@root()> dev:dump-create -d /tmp/mydump
Diagnostic dump created.
</pre>

h3. 5.1.2. Diagnostic

개발자가 번들이 활성화 실패 시 로그 조회
@bundle:diag@
<pre>
karaf@root()> bundle:diag
</pre>

h3. 5.1.3. Dynamic import

@bundle:dynamic-import@ 명령어는 기존 번들의 동적 import를 활성화/비활성화 할 수 있다.

<pre>
karaf@root()> bundle:dynamic-import 50
Enabling dynamic imports on bundle org.ops4j.pax.url.wrap [50]
</pre>

동적 import의 목적은 bundle이 미리 알 수 없는 패키지로 묶이도록 하는 것 이다.
클래스가 요청될 때 번들의 기존 import를 통해 해결할 수 없는 경우 
동적 import에서 다른 번들을 고려하여 추가되는 wiring import가 가능합니다.

@bundle:dynamic-import@ 명령어는 이 동작을 허용하거나 비허용 할 수 있습니다.

h3. 5.1.4. OSGi framework

system:framework명령을 사용하면 현재 사용중인 OSGi 프레임 워크를 표시하고 OSGi 프레임 워크 내에서 디버깅을 활성화/비활성화 할 수 있습니다.

<pre>
karaf@root()> system:framework
Current OSGi framework is felix
karaf@root()> system:framework -debug
Enabling debug for OSGi framework (felix)
karaf@root()> system:framework -nodebug
Disabling debug for OSGi framework (felix)
</pre>

h3. 5.1.5. Stack traces printout

shell:stack-traces-print
